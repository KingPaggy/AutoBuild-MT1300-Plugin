# Fork from P3TERX's GitHub Actions, modified by Wason Fok on Sep 26, 2021
#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build MT1300 from GL-iNet

on:
  
  # SSH
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH Connection to Actions'
        required: false
        default: 'false'

  #repository_dispatch:

  #release:
  #  types: [published]

  #push:
  #  branches:
  #    - master
  #  paths:
  #    - 'config/.config.gl'

  #schedule:
  #  - cron: 0 8 * * 5

  #watch:
  #  types: [started]

env:
  # GL-inet OpenWrt
  REPO_OP_GL: https://github.com/gl-inet/openwrt.git
  REPO_OP_GL_BRANCH: openwrt-19.07.7
  # Lede Openwrt
  REPO_OP_LEDE: https://github.com/coolsnowwolf/lede
  REPO_OP_LEDE_BRANCH: master
  # Customize Script
  CUSTOM_FEEDS: customize/customize-feeds-gl.sh
  CUSTOM_CONFIG: customize/customize-config.sh
  # GL-inet OpenWrt .config
  CONFIG_FILE: config/.config.gl
  FEEDS_CONF: config/feeds.conf.default.gl
  # TimeZone
  TZ: Asia/Shanghai
  # Upload settings
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    # 初始化环境
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Remove All docker images"
        docker rmi `docker images -q`
        echo "Deleting flies, please wait ..."
        #sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo rm -rf \
          /usr/local/lib/android \
          /usr/share/dotnet \
          /etc/apt/sources.list.d/* \
          /etc/mysql \
          /etc/php \
          /opt/ghc
        echo "Uninstalling unnecessary packages, please wait..."
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        echo "Installing dependent packages, please wait..."
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    # Clone GL-inet 和 lede OpenWrt 到 workdir 目录下，并进行连接
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        echo "Clone Lede & GL-inet OpenWrt source"
        git clone $REPO_OP_GL -b $REPO_OP_GL_BRANCH openwrt
        git clone $REPO_OP_LEDE -b $REPO_OP_LEDE_BRANCH lede
        echo "Link Buildroot to workdir"
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        ln -sf /workdir/lede $GITHUB_WORKSPACE/lede
        

    # Update GL-inet OpenWrt feeds
    - name: Update and install OpenWrt feeds
      run: |
        cd /workdir/openwrt
        echo "Update and Install GL-inet OpenWrt feeds, please waiting..."
        ./scripts/feeds update -a && ./scripts/feeds install -a

    # # Update LEDE feeds
    - name: Update and install LEDE feeds
      run: |
        cd /workdir/lede
        echo "Update and Install Lede OpenWrt feeds, please waiting..."
        ./scripts/feeds update -a && ./scripts/feeds install -a
        
    # 加载自定义 feeds 
    - name: Load custom feeds
      run: |
        #[ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $CUSTOM_FEEDS
        cd openwrt
        $GITHUB_WORKSPACE/$CUSTOM_FEEDS

    # 修复编译错误
    - name: Fix compile issue
      run: |
        cd /workdir/openwrt/staging_dir/host/bin
        ln -s /usr/bin/upx upx
        ln -s /usr/bin/upx-ucl upx-ucl
        ls -l upx*
        echo "Copy Lede feeds/packages/lang/golang To GL-inet"
        rm -rf /workdir/openwrt/feeds/packages/lang/golang
        cp -r /workdir/lede/feeds/packages/lang/golang /workdir/openwrt/feeds/packages/lang/golang
    
    # 加载自定义 .config
    - name: Load custom configuration
      run: |
        echo "Move customize config file to GL-inet OpenWrt"
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $CUSTOM_CONFIG
        cd openwrt
        $GITHUB_WORKSPACE/$CUSTOM_CONFIG
    
    # 启用 SSH 连接
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    # 下载 package
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    # 编译固件
    - name: Compile the firmware
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"

    # 检查磁盘使用空间
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    # 上传 bin 目录
    - name: Upload bin directory
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    # 整理需要单独导出的插件
    - name: Organize plugin
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      id: plugin
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        if [ -e "$GITHUB_WORKSPACE/customize/create-plugin-package.sh" ]
        then
            chmod +x $GITHUB_WORKSPACE/customize/create-plugin-package.sh
            $GITHUB_WORKSPACE/customize/create-plugin-package.sh
        fi
        echo "::set-output name=status::success"
        
    # 整理输出文件目录
    - name: Organize files
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      id: organize
      if: steps.plugin.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"
    
    # 上传固件目录
    - name: Upload firmware directory
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}